package component:node@0.1.0;

/// An example world for the component to target.
world nodeworld {
    import component:kv/types@0.1.0;
    export types;
}


interface types { 
  

    record key-value-pair {
        key: string,
        value: string,
    }

    variant store-error{
        key-not-found,
        key-already-exists,
        unexpected-error,
        key-overflow-error,
        value-overflow-error,
        try-from-slice-error,
        utf8-error,
        filesystem-error(u8),
        invalid-magic-bytes,
        stream-error
    }

    record socket-address {
        ip: string, 
        port: u16
    }

    enum bitcoin-network {
        mainnet,
        testnet,
        regtest,
    }

    record offering-bargain {
        fee: option<string>,
        estimated-settlement-time: u64,
        id: string,
        rate: string,
    }

    record node-config {
        wallet-address: string,
        genesis-blockhash: string,
        network: bitcoin-network,
        socket-address: socket-address
    }


    resource client-node {

        constructor(config: node-config);

        get-balance: func() -> result<s64, u32>;

        add-filter: func(filter: string) -> result<_, u32>;

     

    }
}