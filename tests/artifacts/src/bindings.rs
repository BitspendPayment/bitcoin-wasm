// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_test_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    T::test();
}
pub trait Guest {
    fn test();
}
#[doc(hidden)]

macro_rules! __export_world_artifacts_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "test"]
    unsafe extern "C" fn export_test() {
      $($path_to_types)*::_export_test_cabi::<$ty>()
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_artifacts_cabi;
#[allow(dead_code)]
pub mod component {
    #[allow(dead_code)]
    pub mod node {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Error {
                NetworkError,
                TbdexError,
                NoTbdx,
            }
            impl Error {
                pub fn name(&self) -> &'static str {
                    match self {
                        Error::NetworkError => "network-error",
                        Error::TbdexError => "tbdex-error",
                        Error::NoTbdx => "no-tbdx",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        Error::NetworkError => "",
                        Error::TbdexError => "",
                        Error::NoTbdx => "",
                    }
                }
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for Error {}

            impl Error {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Error::NetworkError,
                        1 => Error::TbdexError,
                        2 => Error::NoTbdx,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct SocketAddress {
                pub ip: _rt::String,
                pub port: u16,
            }
            impl ::core::fmt::Debug for SocketAddress {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("SocketAddress")
                        .field("ip", &self.ip)
                        .field("port", &self.port)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum BitcoinNetwork {
                Mainnet,
                Testnet,
                Regtest,
            }
            impl ::core::fmt::Debug for BitcoinNetwork {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        BitcoinNetwork::Mainnet => {
                            f.debug_tuple("BitcoinNetwork::Mainnet").finish()
                        }
                        BitcoinNetwork::Testnet => {
                            f.debug_tuple("BitcoinNetwork::Testnet").finish()
                        }
                        BitcoinNetwork::Regtest => {
                            f.debug_tuple("BitcoinNetwork::Regtest").finish()
                        }
                    }
                }
            }

            impl BitcoinNetwork {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> BitcoinNetwork {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => BitcoinNetwork::Mainnet,
                        1 => BitcoinNetwork::Testnet,
                        2 => BitcoinNetwork::Regtest,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct OfferingBargain {
                pub fee: Option<_rt::String>,
                pub estimated_settlement_time: u64,
                pub id: _rt::String,
                pub rate: _rt::String,
            }
            impl ::core::fmt::Debug for OfferingBargain {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("OfferingBargain")
                        .field("fee", &self.fee)
                        .field("estimated-settlement-time", &self.estimated_settlement_time)
                        .field("id", &self.id)
                        .field("rate", &self.rate)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct NodeConfig {
                pub wallet_address: _rt::String,
                pub wallet_filter: _rt::String,
                pub genesis_blockhash: _rt::String,
                pub network: BitcoinNetwork,
                pub socket_address: SocketAddress,
            }
            impl ::core::fmt::Debug for NodeConfig {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("NodeConfig")
                        .field("wallet-address", &self.wallet_address)
                        .field("wallet-filter", &self.wallet_filter)
                        .field("genesis-blockhash", &self.genesis_blockhash)
                        .field("network", &self.network)
                        .field("socket-address", &self.socket_address)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TbdexConfig {
                pub pfi_uri: _rt::String,
                pub vc_url: _rt::String,
                pub acct_number: _rt::String,
            }
            impl ::core::fmt::Debug for TbdexConfig {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TbdexConfig")
                        .field("pfi-uri", &self.pfi_uri)
                        .field("vc-url", &self.vc_url)
                        .field("acct-number", &self.acct_number)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ClientNode {
                handle: _rt::Resource<ClientNode>,
            }

            impl ClientNode {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for ClientNode {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:node/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]client-node"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl ClientNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(config: &NodeConfig, tbdex_config: Option<&TbdexConfig>) -> Self {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 68]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 68]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        let NodeConfig {
                            wallet_address: wallet_address1,
                            wallet_filter: wallet_filter1,
                            genesis_blockhash: genesis_blockhash1,
                            network: network1,
                            socket_address: socket_address1,
                        } = config;
                        let vec2 = wallet_address1;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        *ptr0.add(4).cast::<usize>() = len2;
                        *ptr0.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        let vec3 = wallet_filter1;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        *ptr0.add(12).cast::<usize>() = len3;
                        *ptr0.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                        let vec4 = genesis_blockhash1;
                        let ptr4 = vec4.as_ptr().cast::<u8>();
                        let len4 = vec4.len();
                        *ptr0.add(20).cast::<usize>() = len4;
                        *ptr0.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                        *ptr0.add(24).cast::<u8>() = (network1.clone() as i32) as u8;
                        let SocketAddress {
                            ip: ip5,
                            port: port5,
                        } = socket_address1;
                        let vec6 = ip5;
                        let ptr6 = vec6.as_ptr().cast::<u8>();
                        let len6 = vec6.len();
                        *ptr0.add(32).cast::<usize>() = len6;
                        *ptr0.add(28).cast::<*mut u8>() = ptr6.cast_mut();
                        *ptr0.add(36).cast::<u16>() = (_rt::as_i32(port5)) as u16;
                        match tbdex_config {
                            Some(e) => {
                                *ptr0.add(40).cast::<u8>() = (1i32) as u8;
                                let TbdexConfig {
                                    pfi_uri: pfi_uri7,
                                    vc_url: vc_url7,
                                    acct_number: acct_number7,
                                } = e;
                                let vec8 = pfi_uri7;
                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                let len8 = vec8.len();
                                *ptr0.add(48).cast::<usize>() = len8;
                                *ptr0.add(44).cast::<*mut u8>() = ptr8.cast_mut();
                                let vec9 = vc_url7;
                                let ptr9 = vec9.as_ptr().cast::<u8>();
                                let len9 = vec9.len();
                                *ptr0.add(56).cast::<usize>() = len9;
                                *ptr0.add(52).cast::<*mut u8>() = ptr9.cast_mut();
                                let vec10 = acct_number7;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *ptr0.add(64).cast::<usize>() = len10;
                                *ptr0.add(60).cast::<*mut u8>() = ptr10.cast_mut();
                            }
                            None => {
                                *ptr0.add(40).cast::<u8>() = (0i32) as u8;
                            }
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:node/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]client-node"]
                            fn wit_import(_: *mut u8) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0);
                        ClientNode::from_handle(ret as u32)
                    }
                }
            }
            impl ClientNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_balance(&self) -> Result<i64, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:node/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client-node.get-balance"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();

                                    l2
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());

                                    Error::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ClientNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_conversion_offer(&self) -> Result<OfferingBargain, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:node/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client-node.get-conversion-offer"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l6 = *ptr0.add(24).cast::<i64>();
                                    let l7 = *ptr0.add(32).cast::<*mut u8>();
                                    let l8 = *ptr0.add(36).cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                                    let l10 = *ptr0.add(40).cast::<*mut u8>();
                                    let l11 = *ptr0.add(44).cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 =
                                        _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                    OfferingBargain {
                                        fee: match l2 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l3 = *ptr0.add(12).cast::<*mut u8>();
                                                    let l4 = *ptr0.add(16).cast::<usize>();
                                                    let len5 = l4;
                                                    let bytes5 = _rt::Vec::from_raw_parts(
                                                        l3.cast(),
                                                        len5,
                                                        len5,
                                                    );

                                                    _rt::string_lift(bytes5)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        estimated_settlement_time: l6 as u64,
                                        id: _rt::string_lift(bytes9),
                                        rate: _rt::string_lift(bytes12),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = i32::from(*ptr0.add(8).cast::<u8>());

                                    Error::_lift(l13 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl ClientNode {
                #[allow(unused_unsafe, clippy::all)]
                pub fn convert_amount(
                    &self,
                    amount: &str,
                    offer_id: &str,
                ) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = amount;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = offer_id;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:node/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client-node.convert-amount"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2,
                        );
                        let l3 = i32::from(*ptr2.add(0).cast::<u8>());
                        match l3 {
                            0 => {
                                let e = {
                                    let l4 = *ptr2.add(4).cast::<*mut u8>();
                                    let l5 = *ptr2.add(8).cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                    _rt::string_lift(bytes6)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l7 = i32::from(*ptr2.add(4).cast::<u8>());

                                    Error::_lift(l7 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod store {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub struct KeyValuePair {
                pub key: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for KeyValuePair {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("KeyValuePair")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            pub type Key = _rt::String;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Error {
                Nae,
            }
            impl Error {
                pub fn name(&self) -> &'static str {
                    match self {
                        Error::Nae => "nae",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        Error::Nae => "",
                    }
                }
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for Error {}

            impl Error {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Error::Nae,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Store {
                handle: _rt::Resource<Store>,
            }

            impl Store {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Store {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:store/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]store"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Store {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:store/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]store"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Store::from_handle(ret as u32)
                    }
                }
            }
            impl Store {
                #[allow(unused_unsafe, clippy::all)]
                pub fn insert(&self, kv: &KeyValuePair) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let KeyValuePair {
                            key: key0,
                            value: value0,
                        } = kv;
                        let vec1 = key0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = value0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:store/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]store.insert"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3,
                        );
                        let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                        match l4 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr3.add(1).cast::<u8>());

                                    Error::_lift(l5 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Store {
                #[allow(unused_unsafe, clippy::all)]
                pub fn search(&self, key: &Key) -> Result<KeyValuePair, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:store/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]store.search"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                                    let l6 = *ptr1.add(12).cast::<*mut u8>();
                                    let l7 = *ptr1.add(16).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                    KeyValuePair {
                                        key: _rt::string_lift(bytes5),
                                        value: _rt::string_lift(bytes8),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l9 = i32::from(*ptr1.add(4).cast::<u8>());

                                    Error::_lift(l9 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Store {
                #[allow(unused_unsafe, clippy::all)]
                pub fn delete(&self, key: &Key) -> Result<(), Error> {
                    unsafe {
                        #[repr(align(1))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 2]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 2]);
                        let vec0 = key;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:store/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]store.delete"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(1).cast::<u8>());

                                    Error::_lift(l3 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod tbdex {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Error {
                OfferNotFound,
            }
            impl Error {
                pub fn name(&self) -> &'static str {
                    match self {
                        Error::OfferNotFound => "offer-not-found",
                    }
                }
                pub fn message(&self) -> &'static str {
                    match self {
                        Error::OfferNotFound => "",
                    }
                }
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &(*self as i32))
                        .field("name", &self.name())
                        .field("message", &self.message())
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{} (error {})", self.name(), *self as i32)
                }
            }

            impl std::error::Error for Error {}

            impl Error {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Error {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Error::OfferNotFound,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct OfferingBargain {
                pub fee: Option<_rt::String>,
                pub estimated_settlement_time: u64,
                pub id: _rt::String,
                pub rate: _rt::String,
            }
            impl ::core::fmt::Debug for OfferingBargain {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("OfferingBargain")
                        .field("fee", &self.fee)
                        .field("estimated-settlement-time", &self.estimated_settlement_time)
                        .field("id", &self.id)
                        .field("rate", &self.rate)
                        .finish()
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Client {
                handle: _rt::Resource<Client>,
            }

            impl Client {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Client {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "component:tbdex/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]client"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(pfi_uri: &str, vc_url: &str, acct_number: &str) -> Self {
                    unsafe {
                        let vec0 = pfi_uri;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = vc_url;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = acct_number;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:tbdex/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]client"]
                            fn wit_import(
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                        );
                        Client::from_handle(ret as u32)
                    }
                }
            }
            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_offer(&self) -> Result<OfferingBargain, Error> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:tbdex/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client.get-offer"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l6 = *ptr0.add(24).cast::<i64>();
                                    let l7 = *ptr0.add(32).cast::<*mut u8>();
                                    let l8 = *ptr0.add(36).cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                                    let l10 = *ptr0.add(40).cast::<*mut u8>();
                                    let l11 = *ptr0.add(44).cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 =
                                        _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                    OfferingBargain {
                                        fee: match l2 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l3 = *ptr0.add(12).cast::<*mut u8>();
                                                    let l4 = *ptr0.add(16).cast::<usize>();
                                                    let len5 = l4;
                                                    let bytes5 = _rt::Vec::from_raw_parts(
                                                        l3.cast(),
                                                        len5,
                                                        len5,
                                                    );

                                                    _rt::string_lift(bytes5)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        estimated_settlement_time: l6 as u64,
                                        id: _rt::string_lift(bytes9),
                                        rate: _rt::string_lift(bytes12),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l13 = i32::from(*ptr0.add(8).cast::<u8>());

                                    Error::_lift(l13 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn convert(
                    &self,
                    offer_id: &str,
                    amount: &str,
                    address: &str,
                ) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = offer_id;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = amount;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = address;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let ptr3 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "component:tbdex/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client.convert"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            ptr3,
                        );
                        let l4 = i32::from(*ptr3.add(0).cast::<u8>());
                        match l4 {
                            0 => {
                                let e = {
                                    let l5 = *ptr3.add(4).cast::<*mut u8>();
                                    let l6 = *ptr3.add(8).cast::<usize>();
                                    let len7 = l6;
                                    let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);

                                    _rt::string_lift(bytes7)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr3.add(4).cast::<u8>());

                                    Error::_lift(l8 as u8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_artifacts_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_artifacts_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_artifacts_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:artifacts:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1511] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe7\x0a\x01A\x02\x01\
A\x08\x01B\x1e\x01r\x02\x03keys\x05values\x04\0\x0ekey-value-pair\x03\0\0\x01m\x03\
\x0dnetwork-error\x0btbdex-error\x07no-tbdx\x04\0\x05error\x03\0\x02\x01r\x02\x02\
ips\x04port{\x04\0\x0esocket-address\x03\0\x04\x01m\x03\x07mainnet\x07testnet\x07\
regtest\x04\0\x0fbitcoin-network\x03\0\x06\x01ks\x01r\x04\x03fee\x08\x19estimate\
d-settlement-timew\x02ids\x04rates\x04\0\x10offering-bargain\x03\0\x09\x01r\x05\x0e\
wallet-addresss\x0dwallet-filters\x11genesis-blockhashs\x07network\x07\x0esocket\
-address\x05\x04\0\x0bnode-config\x03\0\x0b\x01r\x03\x07pfi-uris\x06vc-urls\x0ba\
cct-numbers\x04\0\x0ctbdex-config\x03\0\x0d\x04\0\x0bclient-node\x03\x01\x01k\x0e\
\x01i\x0f\x01@\x02\x06config\x0c\x0ctbdex-config\x10\0\x11\x04\0\x18[constructor\
]client-node\x01\x12\x01h\x0f\x01j\x01x\x01\x03\x01@\x01\x04self\x13\0\x14\x04\0\
\x1f[method]client-node.get-balance\x01\x15\x01j\x01\x0a\x01\x03\x01@\x01\x04sel\
f\x13\0\x16\x04\0([method]client-node.get-conversion-offer\x01\x17\x01j\x01s\x01\
\x03\x01@\x03\x04self\x13\x06amounts\x08offer-ids\0\x18\x04\0\"[method]client-no\
de.convert-amount\x01\x19\x03\x01\x1acomponent:node/types@0.1.0\x05\0\x01B\x12\x01\
r\x02\x03keys\x05values\x04\0\x0ekey-value-pair\x03\0\0\x01m\x01\x0foffer-not-fo\
und\x04\0\x05error\x03\0\x02\x01ks\x01r\x04\x03fee\x04\x19estimated-settlement-t\
imew\x02ids\x04rates\x04\0\x10offering-bargain\x03\0\x05\x04\0\x06client\x03\x01\
\x01i\x07\x01@\x03\x07pfi-uris\x06vc-urls\x0bacct-numbers\0\x08\x04\0\x13[constr\
uctor]client\x01\x09\x01h\x07\x01j\x01\x06\x01\x03\x01@\x01\x04self\x0a\0\x0b\x04\
\0\x18[method]client.get-offer\x01\x0c\x01j\x01s\x01\x03\x01@\x04\x04self\x0a\x08\
offer-ids\x06amounts\x07addresss\0\x0d\x04\0\x16[method]client.convert\x01\x0e\x03\
\x01\x1bcomponent:tbdex/types@0.1.0\x05\x01\x01B\x13\x01r\x02\x03keys\x05values\x04\
\0\x0ekey-value-pair\x03\0\0\x01s\x04\0\x03key\x03\0\x02\x01m\x01\x03nae\x04\0\x05\
error\x03\0\x04\x04\0\x05store\x03\x01\x01i\x06\x01@\0\0\x07\x04\0\x12[construct\
or]store\x01\x08\x01h\x06\x01j\0\x01\x05\x01@\x02\x04self\x09\x02kv\x01\0\x0a\x04\
\0\x14[method]store.insert\x01\x0b\x01j\x01\x01\x01\x05\x01@\x02\x04self\x09\x03\
key\x03\0\x0c\x04\0\x14[method]store.search\x01\x0d\x01@\x02\x04self\x09\x03key\x03\
\0\x0a\x04\0\x14[method]store.delete\x01\x0e\x03\x01\x1bcomponent:store/types@0.\
1.0\x05\x02\x01@\0\x01\0\x04\0\x04test\x01\x03\x04\x01#component:artifacts/artif\
acts@0.1.0\x04\0\x0b\x0f\x01\0\x09artifacts\x03\0\0\0G\x09producers\x01\x0cproce\
ssed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
